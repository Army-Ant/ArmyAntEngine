看了一下你的代码，我们的风格尽量统一一下，所以你注意以下几点：
1.不要使用传统枚举(enum)，应使用强类型枚举(enum class)；不要使用C风格空指针(NULL)，应使用C++风格空指针(nullptr)，但是当为WinAPI传参数的时候可以采用NULL(当然采用nullptr也是没问题的，为了代码风格不会很奇怪而已)，对BOOL的处理办法同NULL
2.对外使用的类，不要用STL作为接口参数，它所在的头文件也不要include标准C++STL的头文件
3.头文件为防止重包含所用到的宏，应当保证独一无二，，如“_ANIMATION_H_”名字的宏很容易冲突，我的处理办法是加上当前日期：“_ANIMATION_H_2015_11_13”
4.尽可能把要用到的头文件在cpp里include，尽量减少.h文件相互include，类的声明体尽量减少对其他头文件的依赖，以免发生莫名其妙的包含错误
5.有关“SAFE_DELETE”之类宏已在ArmyAntLib中有定义，详见ArmyAntLib工程中的AADefine.h文件，你打开ArmyAntLib库编译一下，本工程就能使用了，如果还有其他公共常用宏，也可以添加到AADefine中
6.如果是非常通用的，例如exception，最好写进ArmyAntLib里。如果说一个类的声明和实现都在头文件里，头文件扩展名应该为hpp,但是非内联函数的实现体（即使在头文件里也）不要写在类定义体中，而且通常情况下，非模版函数不要把声明和实现放在一起
7.要令DLL中的类导出到外部使用，包含工程中的此文件：D3d11Use_start.h，然后在以下文件中将你类声明所在头文件包含进去：AA_D3D11_3_used.h, 我们的ArmyAntEngine_start库只需包含后者，即可使用
8.在DirectX_11_3_Used项目中，应将所有代码包含在此名字空间中：namespace AA_Engine，每个小的模块应当有自己的名字空间，例如你的是：AA_Graphic。名字空间的作用类似于文件系统中的文件夹，便于分类整理，防止命名冲突
9.写完一个类就编译一下，把编译器警告等级调至4级，除非特殊情况，正常情况下应保证 0 warning
10.写类的声明时，应当先写public成员，后写protected，最后写private成员，尽量避免public成员变量(时刻谨记你的头文件是给使用者看的，他们不关心你的类里面有哪些private成员)
11.尽量不要建立过多的内容短小的头文件，以免过于繁杂，尽量将用法类似的合并到一起
12.我们的base.hpp类似于预编译头，可以将一些不需要让外面看到的一些define放进base.hpp中
13.项目合作时，独立负责一个模块，其他成员将不关心你的实现方法，但是会关心你的接口格式，因此你的头文件格式不符合约定时，可能会被要求修改，但是cpp文件一般不会
14.完成一个模块后，尽可能在每个头文件中进行详细的注释说明，令其他使用者一眼看明你所写模块的功能和使用方法。为了提高你自己的工作效率，在你写代码的时候，也宜采用阶段性注释，令自己重读代码时不致花费太多时间
15.DxErr这个库有bug，导致你出现unresolved export symbol，这个我也遇见过，解决办法没有查到，我的处理办法是不用DxErr库，不用DX_TRACE这个东西，你先暂时使用C++异常处理，待我把内核接口调试工具写出来再进行替换
16.你的另外一个unresolved export symbol我已经修复，查阅dllmain.cpp开头。